{"version":3,"sources":["Components/Menu/logo.png","Components/Menu/Menu.js","Components/MapInterface/MapInterface.js","Layouts/MainLayout/MainLayout.js","Components/Filters/Filters.js","pages/Map/Map.js","Components/SourceItem/SourceItem.js","pages/Sources/Sources.js","pages/Router.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","fireLayer","incidentLayer","responseLayer","hazardLayer","AppMenu","React","useState","anchorEl","setAnchorEl","handleClose","style","position","width","height","src","Logo","top","left","transform","textAlign","Button","aria-controls","aria-haspopup","onClick","event","currentTarget","className","fontSize","Menu","color","id","keepMounted","open","Boolean","onClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuItem","to","MainLayout","props","Grid","container","padding","spacing","item","xs","md","lg","sidebar","children","MapInterface","mapRef","useRef","visible","filterToggles","useEffect","loadModules","css","then","ArcGISMap","MapView","GeoJSONLayer","url","opacity","renderer","type","symbol","labelingInfo","haloColor","haloSize","font","family","size","weight","labelExpressionInfo","expression","outline","minScale","map","basemap","layers","view","current","center","zoom","ref","Filters","onToggleFilter","List","layer","i","ListItem","key","button","e","ListItemIcon","Checkbox","edge","checked","tabIndex","disableRipple","inputProps","ListItemText","primary","secondary","Map","setToggleFilters","console","log","SourceItem","organization","description","variant","href","link","Sources","Router","exact","path","App","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fc136c86.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.c7082cee.png\";","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport MapIcon from '@material-ui/icons/Map';\r\nimport ReceiptIcon from '@material-ui/icons/Receipt';\r\nimport Button from '@material-ui/core/Button';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport { Link } from 'react-router-dom';\r\nimport './Menu.css';\r\nimport Logo from './logo.png';\r\n\r\nfunction ListItemLink(props) {\r\n  return <ListItem button component=\"a\" {...props} />;\r\n}\r\n\r\nexport const AppMenu = () => {\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n  \r\n  return (\r\n    <div>\r\n      <div>\r\n        <div style={{position: 'relative', width: '100%', height: '100px'}}>\r\n          <img src={Logo} height={100} width={100} style={{position : 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)'}}/>\r\n        </div>\r\n        <div style={{textAlign: 'center'}}>\r\n          <h1>California Fire Tracker</h1>\r\n        </div>\r\n        <div>\r\n          <div style={{textAlign: 'center'}}>\r\n            <Button aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}>\r\n              <MenuIcon \r\n                className=\"icon\"\r\n                fontSize=\"large\"\r\n              />\r\n            </Button>\r\n          </div>\r\n          <Menu\r\n            color=\"#2E2E2E\"\r\n            id=\"simple-menu\"\r\n            anchorEl={anchorEl}\r\n            keepMounted\r\n            open={Boolean(anchorEl)}\r\n            onClose={handleClose}\r\n            anchorOrigin={{\r\n              vertical: 'bottom',\r\n              horizontal: 'center',\r\n            }}\r\n            transformOrigin={{\r\n              vertical: 'top',\r\n              horizontal: 'center',\r\n            }}\r\n          >\r\n            <MenuItem onClick={handleClose}>\r\n              <MapIcon \r\n                className=\"menu-icon\"\r\n              />\r\n              <Link to='/'>\r\n                Dashboard\r\n              </Link>\r\n            </MenuItem>\r\n            <MenuItem onClick={handleClose}>\r\n              <ReceiptIcon \r\n                className=\"menu-icon\"\r\n              />\r\n              <Link to='/sources'>\r\n                Sources\r\n              </Link>\r\n            </MenuItem>\r\n          </Menu>\r\n        </div>\r\n      </div>\r\n    </div> \r\n  )\r\n}\r\n\r\n\r\n{/* <div>\r\n  <div style={{position: 'relative', width: '100%', height: '100px'}}>\r\n    <img src={Logo} height={100} width={100} style={{position : 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)'}}/>\r\n  </div>\r\n  <div style={{textAlign: 'center'}}>\r\n    <h1>California Fire Tracker</h1>\r\n  </div>\r\n  <div>\r\n    <h2>Menu: </h2>\r\n    <List component=\"nav\" aria-label=\"main mailbox folders\">\r\n      <ListItem button>\r\n        <ListItemIcon>\r\n          <MapIcon \r\n            className=\"icon\"\r\n          />\r\n        </ListItemIcon>\r\n        <ListItemText \r\n          primary=\"Map\" \r\n        />\r\n      </ListItem>\r\n      <ListItem button>\r\n        <ListItemIcon>\r\n          <ReceiptIcon \r\n            className=\"icon\"\r\n          />\r\n        </ListItemIcon>\r\n        <ListItemText \r\n          primary=\"Sources\" \r\n        />\r\n      </ListItem>\r\n    </List>\r\n  </div>\r\n</div> */}\r\n\r\n\r\n\r\n{/* <Grid container>\r\n  <Grid item xs={12}>\r\n    <img src={Logo} alt=\"CA Fire Tracker\" width={100} height={100}/>\r\n    <h2>California Fire Tracker</h2>\r\n  </Grid>\r\n  <Grid container item xs={12}>\r\n    <Grid item xs={2}>\r\n      <MenuItem\r\n        title=\"Dashboard\"\r\n        to=\"/\"\r\n      />\r\n    </Grid>\r\n    <Grid item xs={2}>\r\n      <MenuItem\r\n        title=\"Dashboard\"\r\n        to=\"/\"\r\n      />\r\n    </Grid>\r\n  </Grid>\r\n</Grid> */}","import React, { useEffect, useRef } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { loadModules } from 'esri-loader';\r\nimport './MapInterface.css';\r\n\r\nlet fireLayer;\r\nlet incidentLayer;\r\nlet responseLayer;\r\nlet hazardLayer;\r\n\r\nexport const MapInterface = (props) => {\r\n  const mapRef = useRef();\r\n\r\n  // set visibility based on filters\r\n  if (fireLayer) fireLayer.visible = props.filterToggles.fireLayer;\r\n  if (incidentLayer) incidentLayer.visible = props.filterToggles.incidentLayer;\r\n  if (responseLayer) responseLayer.visible = props.filterToggles.responseLayer;\r\n  if (hazardLayer) hazardLayer.visible = props.filterToggles.hazardLayer;\r\n\r\n  useEffect(\r\n    () => {\r\n      // lazy load the required ArcGIS API for JavaScript modules and CSS\r\n      loadModules(['esri/Map', 'esri/views/MapView', \"esri/layers/GeoJSONLayer\", \"esri/layers/FeatureLayer\"], { css: true })\r\n      .then(([ArcGISMap, MapView, GeoJSONLayer, FeatureLayer]) => {\r\n\r\n        if (!fireLayer) {\r\n          fireLayer = new GeoJSONLayer({\r\n            url: \"data/wildfire.geojson\",\r\n            id: 'fireLayer',\r\n            opacity: 0.55,\r\n            renderer: {\r\n              type: \"simple\",\r\n              symbol: {\r\n                type: \"simple-fill\",\r\n                color: \"red\"\r\n              }\r\n            }\r\n          });\r\n          // adds fire names to fireLayer\r\n          fireLayer.labelingInfo = [{ // autocasts as new LabelClass()\r\n            symbol: {\r\n              type: \"text\", // autocasts as new TextSymbol()\r\n              color: \"red\",\r\n              haloColor: \"black\",\r\n              haloSize: '2px',\r\n              font: { // autocast as new Font()\r\n                family: \"playfair-display\",\r\n                size: 10,\r\n                weight: \"bold\"\r\n              }\r\n            },\r\n            // labelPlacement: \"above-center\",\r\n            labelExpressionInfo: {\r\n              expression: \"$feature.IncidentName\"\r\n            }\r\n          }];\r\n        }\r\n\r\n        /*\r\n          INCIDENTS\r\n          ---------------------------------\r\n          Useful info in layer: \r\n          - properties.\"DailyAcres\": 11.1\r\n          - properties.\"DiscoveryAcres\": 0.1\r\n          - properties.\"FireCause\": \"Human\"\r\n          - properties.\"FireCauseGeneral\": \"Utilities\"\r\n          - properties.\"FireCauseSpecific\": \"Power Generation/Transmission\"\r\n          - properties.\"ModifiedOnDateTime\": 1590524946247.0 \r\n              - In Epoch time format: https://www.epochconverter.com/\r\n          - properties.\"POOCounty\": \"San Bernardino\"\r\n          - properties.\"FireBehaviorGeneral\"\r\n              - FireBehaviorGeneral1 2 3 and 4\r\n          - properties.\"PredominantFuelGroup\": \"Grass-Shrub\"  \r\n          - properties.\"PredominantFuelModel\": \"GS2\" \r\n              - Codes for Fuel Models found here: https://www.fs.fed.us/rm/pubs/rmrs_gtr153.pdf\r\n              - It would be good to add a description to these codes somewhere for context\r\n        */\r\n        if (!incidentLayer) {\r\n          incidentLayer = new GeoJSONLayer({\r\n            url: \"data/incidents.geojson\", // locally stored instead\r\n            id: 'incidentLayer',\r\n            renderer: {\r\n              type: \"simple\",\r\n              symbol: {\r\n                type: \"simple-marker\",\r\n                size: 6,\r\n                color: \"yellow\",\r\n                outline: {\r\n                  width: 0.4,\r\n                  color: \"black\"\r\n                },\r\n              }\r\n            },\r\n          });\r\n          \r\n          incidentLayer.labelingInfo = [{ // autocasts as new LabelClass()\r\n            symbol: {\r\n              type: \"text\", // autocasts as new TextSymbol()\r\n              color: \"yellow\",\r\n              haloColor: \"black\",\r\n              haloSize: '1px',\r\n              font: { // autocast as new Font()\r\n                family: \"playfair-display\",\r\n                size: 10,\r\n                weight: \"bold\"\r\n              },\r\n            },\r\n            minScale: 300000,\r\n            // labelPlacement: \"above-center\",\r\n            labelExpressionInfo: {\r\n              expression: \"$feature.IncidentName\"\r\n            }\r\n          }];\r\n        }\r\n        \r\n        // Responding locations\r\n        if (!responseLayer) {\r\n          responseLayer = new GeoJSONLayer({\r\n            url: \"data/response.geojson\",\r\n            id: 'responseLayer',\r\n            opacity: 0.4,\r\n            renderer: {\r\n              type: \"simple\",\r\n              symbol: {\r\n                type: \"simple-fill\",\r\n                color: \"teal\"\r\n              }\r\n            }\r\n          });\r\n        }\r\n\r\n        // hazardous zones with high likelyhood of fire\r\n        if (!hazardLayer) {\r\n          hazardLayer = new GeoJSONLayer({\r\n            url: 'data/hazard-areas.geojson',\r\n            id: 'hazardLayer',\r\n            opacity: 0.4,\r\n            renderer: {\r\n              type: \"simple\",\r\n              symbol: {\r\n                type: \"simple-fill\",\r\n                color: \"orange\"\r\n              }\r\n            }\r\n          })\r\n        }\r\n        \r\n\r\n        const map = new ArcGISMap({\r\n          basemap: 'topo-vector',\r\n          layers: [fireLayer, incidentLayer, responseLayer, hazardLayer]\r\n        });\r\n\r\n        // load the map view at the ref's DOM node\r\n        const view = new MapView({\r\n          container: mapRef.current,\r\n          map: map,\r\n          center: [-118, 34],\r\n          zoom: 8\r\n        }); \r\n\r\n        \r\n        \r\n\r\n        return () => {\r\n          if (view) {\r\n            // destroy the map view\r\n            view.container = null;\r\n          }\r\n        };\r\n      });\r\n    },\r\n    [] // dependencies\r\n  );\r\n\r\n  return <div className=\"webmap\" ref={mapRef} />;\r\n};","import React from 'react';\r\nimport { AppMenu } from '../../Components/Menu/Menu';\r\nimport { Grid } from '@material-ui/core';\r\n\r\n\r\nexport const MainLayout = (props) => {\r\n\r\n  return (\r\n    <Grid container style={{ padding: 20 }} spacing={3}>\r\n      <Grid item xs={12} md={12} lg={3} style={{ padding: 20 }}>\r\n        <AppMenu />\r\n        {props.sidebar ? props.sidebar : []}\r\n      </Grid>\r\n      <Grid item xs={12} md={12} lg={9}>\r\n        {props.children}\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}","import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport './Filters.css';\r\n\r\nexport const Filters = (props) => {\r\n\r\n  const { onToggleFilter } = props;\r\n\r\n  const handleToggleFilter = (id) => {\r\n    onToggleFilter(id)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Map Filters:</h2>\r\n      <List className=\"filters-list\">\r\n        {props.layers.map((layer, i) => (\r\n            <ListItem \r\n              className=\"filter-item\"\r\n              key={layer.id}\r\n              button\r\n              onClick={(e) => {\r\n                  handleToggleFilter(layer.id)\r\n                }  \r\n              }\r\n            >\r\n              <ListItemIcon>\r\n                <Checkbox\r\n                  edge=\"start\"\r\n                  checked={layer.checked}\r\n                  tabIndex={-1}\r\n                  disableRipple\r\n                  inputProps={{ 'aria-labelledby': `filter-label-${layer.id}`}}\r\n                  style={{\r\n                    color: layer.color || 'white'\r\n                  }}\r\n                />\r\n              </ListItemIcon>\r\n              <ListItemText \r\n                className=\"filter-item-text\"\r\n                id={`filter-label-${layer.id}`} \r\n                primary={layer.primary || 'Unknown layer'} \r\n                secondary={layer.secondary || ''}\r\n              />\r\n\r\n            </ListItem>\r\n\r\n        ))}\r\n      </List>\r\n    </div>\r\n    \r\n  );\r\n}","import React, { useState } from 'react';\r\nimport { MainLayout } from '../../Layouts/MainLayout/MainLayout';\r\nimport { MapInterface } from '../../Components/MapInterface/MapInterface';\r\nimport { Filters } from '../../Components/Filters/Filters.js';\r\n\r\nexport const Map = () => {\r\n\r\n  const [ filterToggles, setToggleFilters ] = useState({\r\n    fireLayer: true,\r\n    incidentLayer: true,\r\n    responseLayer: true,\r\n    hazardLayer: true\r\n  });\r\n\r\n  const handleToggleFilter = (id) => {\r\n    console.log(id)\r\n\r\n    setToggleFilters({\r\n      ...filterToggles,\r\n      [id]: !filterToggles[id]\r\n    })\r\n  }\r\n\r\n  return (\r\n    <MainLayout\r\n      sidebar={\r\n        <Filters\r\n          layers={[\r\n            {\r\n              primary: 'Active Fires',\r\n              secondary: `Current active wildfires`,\r\n              id: 'fireLayer',\r\n              checked: filterToggles.fireLayer,\r\n              color: 'red'\r\n            },\r\n            {\r\n              primary: 'Recent Incidents',\r\n              secondary: 'Contains all fire-related incidents. Click for specific details such as cause & fuel source',\r\n              id: 'incidentLayer',\r\n              checked: filterToggles.incidentLayer,\r\n              color: 'yellow'\r\n            },\r\n            {\r\n              primary: 'Response Zones',\r\n              secondary: 'Visualizes wildfire response events and suppression efforts',\r\n              id: 'responseLayer',\r\n              checked: filterToggles.responseLayer,\r\n              color: '#00CDCD'\r\n            },\r\n            {\r\n              primary: 'Fire Hazard Severity Zone',\r\n              secondary: 'mapped area that designates zones with varying degrees of fire hazard based on factors such as fuel, slope, and fire weather.',\r\n              id: 'hazardLayer',\r\n              checked: filterToggles.hazardLayer,\r\n              color: 'orange'\r\n            }\r\n          ]}\r\n          onToggleFilter={handleToggleFilter}\r\n        />\r\n      }\r\n    >\r\n      <MapInterface \r\n        filterToggles={filterToggles}\r\n      />\r\n    </MainLayout>\r\n  )\r\n}","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport './SourceItem.css';\r\n\r\nexport const SourceItem = (props) => {\r\n    return (\r\n        <div className=\"source-item\">\r\n            <h3 className=\"source-title\">Layer: {props.layer}</h3>\r\n            <h5 className=\"source-organization\">{props.organization}</h5>\r\n            <p className=\"source-description\">{props.description}</p>\r\n            <Button \r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                href={props.link}\r\n            >\r\n                Go to source\r\n            </Button>\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport { MainLayout } from '../../Layouts/MainLayout/MainLayout';\r\nimport { SourceItem } from '../../Components/SourceItem/SourceItem';\r\n\r\nexport const Sources = () => {\r\n\r\n  return (\r\n    <MainLayout\r\n      sidebar={[]}\r\n    >\r\n      <h1>Sources</h1>\r\n      <p>Listed below are the dataset sources for each of the layers used on this site. The map is powered by ArcGIS which can be found <a href=\"https://developers.arcgis.com/javascript/\">here</a></p>\r\n      <SourceItem\r\n        layer='Active Fires'\r\n        organization='National Interagency Fire Center'\r\n        description='Displays wildfire perimeters made public by the NIFS.'\r\n        link='https://data-nifc.opendata.arcgis.com/datasets/wildfire-perimeters'\r\n      />\r\n      <SourceItem\r\n        layer='Recent Incidents'\r\n        organization='Integrated Reporting of Wildland Fire Information'\r\n        description='All wildland fire incidents from the IRWIN (Integrated Reporting of Wildland Fire Information) integration service that meet the following criteria:\r\n        IRWIN records, categorized as valid Wildfire (WF), Prescribed Fire (RX), or Incident Complex (CX) records, that have not been declared contained, controlled, or out, have not had fire report records completed (certified), and are not \"quarantined\" in IRWIN due to potential conflicts with other records.'\r\n        link='https://data-nifc.opendata.arcgis.com/datasets/incident-3'\r\n      />\r\n      <SourceItem\r\n        layer='Response Zones'\r\n        organization='National Interagency Fire Center'\r\n        description='Contains information detailing wildfire response events and suppression efforts.'\r\n        link='https://sampleserver6.arcgisonline.com/arcgis/rest/services/Wildfire/FeatureServer/2'\r\n      />\r\n    </MainLayout>\r\n  )\r\n\r\n}","import  React from 'react';\r\nimport { \r\n  Switch,\r\n  Route\r\n } from 'react-router-dom';\r\n import { Map } from './Map/Map';\r\n import { Sources } from '../pages/Sources/Sources';\r\n\r\nexport const Router = () => (\r\n  <Switch>\r\n    <Route exact path=\"/\">\r\n      <Map/>\r\n    </Route>\r\n    <Route exact path=\"/sources\">\r\n      <Sources />\r\n    </Route>\r\n  </Switch>\r\n)","import React from 'react';\r\nimport {\r\n  BrowserRouter\r\n} from 'react-router-dom';\r\nimport './App.css';\r\nimport { AppMenu } from './Components/Menu/Menu';\r\nimport { Router } from './pages/Router';\r\nimport { Grid } from '@material-ui/core';\r\n\r\nconst App = () => {\r\n  \r\n  return (\r\n    <BrowserRouter>\r\n      <Grid container spacing={0}>\r\n        <Grid item xs={12}>\r\n          <Router/>\r\n        </Grid>\r\n      </Grid>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}